<poller-configuration xmlns="http://xmlns.opennms.org/xsd/config/poller"
                      threads="30"
                      asyncPollingEngineEnabled="true"
                      maxConcurrentAsyncPolls="200"
                      nextOutageId="SELECT nextval('outageNxtId')"
                      serviceUnresponsiveEnabled="false"
                      pathOutageEnabled="false">
   <node-outage status="on"
                pollAllIfNoCriticalServiceDefined="true">
      <critical-service name="ping.10s"/>
   </node-outage>

   <package name="opennms.minion.monitoring">
      <filter>IPADDR != '0.0.0.0'</filter>
      <include-range begin="1.1.1.1" end="254.254.254.254"/>
      <include-range begin="::1" end="ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"/>
      <rrd step="30">
         <rra>RRA:AVERAGE:0.5:1:2016</rra>
         <rra>RRA:AVERAGE:0.5:12:1488</rra>
         <rra>RRA:AVERAGE:0.5:288:366</rra>
         <rra>RRA:MAX:0.5:288:366</rra>
         <rra>RRA:MIN:0.5:288:366</rra>
      </rrd>
      <service name="Minion-Heartbeat" interval="30000" user-defined="false" status="on">
         <parameter key="period" value="30000"/>
      </service>
      <service name="Minion-RPC" interval="30000" user-defined="false" status="on">
         <parameter key="ttl" value="30000"/>
         <parameter key="ds-name" value="minion-rpc"/>
      </service>
      <service name="JMX-Minion" interval="30000" user-defined="false" status="on">
         <parameter key="port" value="18980"/>
         <parameter key="retry" value="2"/>
         <parameter key="timeout" value="3000"/>
         <parameter key="ds-name" value="jmx-minion"/>
         <parameter key="use-foreign-id-as-system-id" value="true"/>
      </service>
      <downtime begin="0" interval="30000"/>
   </package>

   <!-- 10 second polling -->
   <package name="test.10s.critical.service">
      <filter>IPADDR != '0.0.0.0'</filter>
      <include-range begin="0.0.0.0" end="255.255.255.255"/>
      <include-range begin="1.1.1.1" end="254.254.254.254"/>
      <include-range begin="::1" end="ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"/>
      <rrd step="10">
         <rra>RRA:AVERAGE:0.5:1:20160</rra>
         <rra>RRA:AVERAGE:0.5:12:14880</rra>
         <rra>RRA:AVERAGE:0.5:288:3660</rra>
         <rra>RRA:MAX:0.5:288:3660</rra>
         <rra>RRA:MIN:0.5:288:3660</rra>
      </rrd>
      <service name="ping.10s" interval="10000" user-defined="true" status="on">
         <pattern><![CDATA[^ping\.10s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="allow-fragmentation" value="${requisition:allow-fragmentation|true}"/>
         <parameter key="dscp" value="${requisition:dscp|0}"/>
         <parameter key="packet-size" value="${requisition:packet-size|64}"/>
         <parameter key="thresholding-enabled" value="${requisition:thresholding-enabled|true}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|ping.10s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|ping.10s}"/>
      </service>
      <downtime begin="0" end="300000" interval="10000"/>
      <downtime begin="300000" end="43200000" interval="30000"/>
      <downtime begin="43200000" end="432000000" interval="300000"/>
      <downtime begin="432000000" interval="600000"/>
   </package>

   <!-- 30 second polling -->
   <package name="test.30s">
      <filter>IPADDR != '0.0.0.0'</filter>
      <include-range begin="0.0.0.0" end="255.255.255.255"/>
      <include-range begin="1.1.1.1" end="254.254.254.254"/>
      <include-range begin="::1" end="ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"/>
      <rrd step="30">
         <rra>RRA:AVERAGE:0.5:1:20160</rra>
         <rra>RRA:AVERAGE:0.5:12:14880</rra>
         <rra>RRA:AVERAGE:0.5:288:3660</rra>
         <rra>RRA:MAX:0.5:288:3660</rra>
         <rra>RRA:MIN:0.5:288:3660</rra>
      </rrd>
      <service name="snmp.scalar.30s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^snmp\.scalar\.30s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="oid" value="${requisition:oid|.1.3.6.1.2.1.1.2.0}"/>
         <parameter key="hex" value="${requisition:hex|false}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|snmp.scalar.30s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|snmp.scalar.30s}"/>
      </service>
      <downtime begin="0" end="300000" interval="30000"/>
      <downtime begin="300000" end="43200000" interval="60000"/>
      <downtime begin="43200000" end="432000000" interval="300000"/>
      <downtime begin="432000000" interval="600000"/>
   </package>

   <!-- 60 second polling -->
   <package name="test.60s">
      <filter>IPADDR != '0.0.0.0'</filter>
      <include-range begin="0.0.0.0" end="255.255.255.255"/>
      <include-range begin="1.1.1.1" end="254.254.254.254"/>
      <include-range begin="::1" end="ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"/>
      <rrd step="60">
         <rra>RRA:AVERAGE:0.5:1:20160</rra>
         <rra>RRA:AVERAGE:0.5:12:14880</rra>
         <rra>RRA:AVERAGE:0.5:288:3660</rra>
         <rra>RRA:MAX:0.5:288:3660</rra>
         <rra>RRA:MIN:0.5:288:3660</rra>
      </rrd>
      <service name="dns.resolve.60s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^dns\.resolve\..$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|1000}"/>
         <parameter key="port" value="${requisition:port|53}"/>
         <parameter key="resolution-type" value="${requisition:resolution-type|v4}"/>
         <parameter key="record-types" value="${requisition:record-type|A}"/>
         <parameter key="lookup" value="${requisition:lookup}"/>
         <parameter key="nameserver" value="${requisition:nameserver}" />
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|dns.resolve.60s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|dns.resolve.60s}"/>
      </service>
      <service name="http.60s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^http\.60s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|3}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="port" value="${requisition:port|443}"/>
         <parameter key="host-name" value="${requisition:vhost}"/>
         <parameter key="url" value="${requisition:path|/}"/>
         <parameter key="response" value="${requisition:response|200}" />
         <parameter key="verbose" value="${requisition:verbose|false}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|http.60s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|http.60s}"/>
      </service>
      <service name="https.60s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^https\.60s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|3}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="port" value="${requisition:port|443}"/>
         <parameter key="host-name" value="${requisition:vhost}"/>
         <parameter key="url" value="${requisition:path|/}"/>
         <parameter key="response" value="${requisition:response|200}" />
         <parameter key="verbose" value="${requisition:verbose|false}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|https.60s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|https.60s}"/>
      </service>
      <service name="snmp.scalar.60s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^snmp\.scalar\.60s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="oid" value="${requisition:oid|.1.3.6.1.2.1.1.2.0}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|snmp.scalar.60s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|snmp.scalar.60s}"/>
      </service>
      <service name="snmp.prtable.60s" interval="30000" user-defined="true" status="on">
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
      </service>
      <service name="ssl.cert.60s" interval="60000" user-defined="true" status="on">
         <pattern><![CDATA[^ssl\.cert\..$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="port" value="${requisition:port|443}"/>
         <parameter key="days" value="${requisition:days|7}"/>
         <parameter key="server-name" value="${requisition:vhost}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|ssl.cert.60s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|ssl.cert.60s}"/>
      </service>
      <downtime begin="0" end="60000" interval="20000"/>
      <downtime begin="300000" end="43200000" interval="60000"/>
      <downtime begin="43200000" end="432000000" interval="300000"/>
      <downtime begin="432000000" interval="600000"/>
   </package>

   <package name="test.300s">
      <filter>IPADDR != '0.0.0.0'</filter>
      <include-range begin="0.0.0.0" end="255.255.255.255"/>
      <include-range begin="1.1.1.1" end="254.254.254.254"/>
      <include-range begin="::1" end="ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"/>
      <rrd step="300">
         <rra>RRA:AVERAGE:0.5:1:20160</rra>
         <rra>RRA:AVERAGE:0.5:12:14880</rra>
         <rra>RRA:AVERAGE:0.5:288:3660</rra>
         <rra>RRA:MAX:0.5:288:3660</rra>
         <rra>RRA:MIN:0.5:288:3660</rra>
      </rrd>
      <service name="tcp.300s" interval="300000" user-defined="true" status="on">
         <pattern><![CDATA[^sql\.300s\..*$]]></pattern>
         <parameter key="retry" value="${requisition:retry|2}"/>
         <parameter key="timeout" value="${requisition:timeout|3000}"/>
         <parameter key="rrd-base-name" value="${requisition:rrdBaseName|tcp.300s}"/>
         <parameter key="ds-name" value="${requisition:rrdBaseName|tcp.300s}"/>
      </service>
      <downtime begin="0" end="300000" interval="30000"/><!-- 30s, 0, 5m -->
      <downtime begin="300000" end="43200000" interval="300000"/><!-- 5m, 5m, 12h -->
      <downtime begin="43200000" end="432000000" interval="600000"/><!-- 10m, 12h, 5d -->
      <downtime begin="432000000" interval="3600000"/><!-- 1h, 5d -->
   </package>

   <!-- Monitor classes -->
   <monitor service="Minion-Heartbeat" class-name="org.opennms.netmgt.poller.monitors.MinionHeartbeatMonitor"/>
   <monitor service="Minion-RPC" class-name="org.opennms.netmgt.poller.monitors.MinionRpcMonitor"/>

   <monitor service="ping.10s" class-name="org.opennms.netmgt.poller.monitors.IcmpMonitor"/>

   <monitor service="snmp.scalar.30s" class-name="org.opennms.netmgt.poller.monitors.SnmpMonitor"/>

   <monitor service="dns.resolve.60s" class-name="org.opennms.netmgt.poller.monitors.DNSResolutionMonitor" />
   <monitor service="http.60s" class-name="org.opennms.netmgt.poller.monitors.HttpsMonitor"/>
   <monitor service="https.60s" class-name="org.opennms.netmgt.poller.monitors.HttpsMonitor"/>
   <monitor service="snmp.scalar.60s" class-name="org.opennms.netmgt.poller.monitors.SnmpMonitor"/>
   <monitor service="snmp.prtable.60s" class-name="org.opennms.netmgt.poller.monitors.PrTableMonitor"/>
   <monitor service="ssl.cert.60s" class-name="org.opennms.netmgt.poller.monitors.SSLCertMonitor"/>

   <monitor service="tcp.300s" class-name="org.opennms.netmgt.poller.monitors.TcpMonitor"/>

</poller-configuration>
